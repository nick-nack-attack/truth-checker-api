function cov_l9z2l0cmb(){var path="/Users/nickfarni/WebstormProjects/truth-checker-api/src/facts/facts-router.js";var hash="fa336572cab3f1b0845741410b61af14ac510f04";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/nickfarni/WebstormProjects/truth-checker-api/src/facts/facts-router.js",statementMap:{"0":{start:{line:4,column:34},end:{line:4,column:52}},"1":{start:{line:5,column:34},end:{line:5,column:42}},"2":{start:{line:6,column:34},end:{line:6,column:40}},"3":{start:{line:7,column:34},end:{line:7,column:49}},"4":{start:{line:10,column:34},end:{line:10,column:82}},"5":{start:{line:11,column:34},end:{line:11,column:74}},"6":{start:{line:12,column:34},end:{line:12,column:60}},"7":{start:{line:13,column:34},end:{line:13,column:50}},"8":{start:{line:16,column:0},end:{line:46,column:6}},"9":{start:{line:19,column:6},end:{line:24,column:22}},"10":{start:{line:22,column:12},end:{line:22,column:58}},"11":{start:{line:29,column:35},end:{line:29,column:43}},"12":{start:{line:30,column:31},end:{line:30,column:41}},"13":{start:{line:31,column:23},end:{line:31,column:32}},"14":{start:{line:32,column:23},end:{line:32,column:30}},"15":{start:{line:33,column:24},end:{line:33,column:74}},"16":{start:{line:36,column:6},end:{line:36,column:41}},"17":{start:{line:38,column:6},end:{line:45,column:22}},"18":{start:{line:41,column:12},end:{line:43,column:55}},"19":{start:{line:48,column:0},end:{line:145,column:6}},"20":{start:{line:52,column:6},end:{line:52,column:59}},"21":{start:{line:56,column:26},end:{line:56,column:36}},"22":{start:{line:58,column:6},end:{line:67,column:23}},"23":{start:{line:61,column:12},end:{line:65,column:14}},"24":{start:{line:78,column:10},end:{line:78,column:18}},"25":{start:{line:80,column:19},end:{line:87,column:7}},"26":{start:{line:89,column:22},end:{line:89,column:40}},"27":{start:{line:92,column:6},end:{line:96,column:7}},"28":{start:{line:93,column:8},end:{line:95,column:9}},"29":{start:{line:94,column:10},end:{line:94,column:26}},"30":{start:{line:99,column:26},end:{line:99,column:68}},"31":{start:{line:102,column:6},end:{line:112,column:7}},"32":{start:{line:103,column:8},end:{line:111,column:9}},"33":{start:{line:115,column:29},end:{line:121,column:31}},"34":{start:{line:123,column:28},end:{line:126,column:9}},"35":{start:{line:128,column:6},end:{line:143,column:12}},"36":{start:{line:133,column:12},end:{line:139,column:16}},"37":{start:{line:135,column:18},end:{line:135,column:51}},"38":{start:{line:138,column:16},end:{line:138,column:51}},"39":{start:{line:142,column:12},end:{line:142,column:51}},"40":{start:{line:147,column:0},end:{line:147,column:29}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:9},end:{line:18,column:10}},loc:{start:{line:18,column:29},end:{line:25,column:5}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:21,column:16},end:{line:21,column:17}},loc:{start:{line:21,column:24},end:{line:23,column:11}},line:21},"2":{name:"(anonymous_2)",decl:{start:{line:26,column:26},end:{line:26,column:27}},loc:{start:{line:26,column:46},end:{line:46,column:5}},line:26},"3":{name:"(anonymous_3)",decl:{start:{line:40,column:16},end:{line:40,column:17}},loc:{start:{line:40,column:24},end:{line:44,column:11}},line:40},"4":{name:"(anonymous_4)",decl:{start:{line:51,column:9},end:{line:51,column:10}},loc:{start:{line:51,column:29},end:{line:53,column:5}},line:51},"5":{name:"(anonymous_5)",decl:{start:{line:54,column:12},end:{line:54,column:13}},loc:{start:{line:54,column:32},end:{line:68,column:5}},line:54},"6":{name:"(anonymous_6)",decl:{start:{line:60,column:16},end:{line:60,column:17}},loc:{start:{line:60,column:22},end:{line:66,column:11}},line:60},"7":{name:"(anonymous_7)",decl:{start:{line:69,column:27},end:{line:69,column:28}},loc:{start:{line:69,column:47},end:{line:145,column:5}},line:69},"8":{name:"(anonymous_8)",decl:{start:{line:132,column:16},end:{line:132,column:17}},loc:{start:{line:132,column:22},end:{line:140,column:11}},line:132},"9":{name:"(anonymous_9)",decl:{start:{line:134,column:20},end:{line:134,column:21}},loc:{start:{line:134,column:30},end:{line:136,column:17}},line:134},"10":{name:"(anonymous_10)",decl:{start:{line:137,column:21},end:{line:137,column:22}},loc:{start:{line:137,column:30},end:{line:139,column:15}},line:137},"11":{name:"(anonymous_11)",decl:{start:{line:141,column:17},end:{line:141,column:18}},loc:{start:{line:141,column:26},end:{line:143,column:11}},line:141}},branchMap:{"0":{loc:{start:{line:93,column:8},end:{line:95,column:9}},type:"if",locations:[{start:{line:93,column:8},end:{line:95,column:9}},{start:{line:93,column:8},end:{line:95,column:9}}],line:93},"1":{loc:{start:{line:102,column:6},end:{line:112,column:7}},type:"if",locations:[{start:{line:102,column:6},end:{line:112,column:7}},{start:{line:102,column:6},end:{line:112,column:7}}],line:102},"2":{loc:{start:{line:115,column:29},end:{line:121,column:31}},type:"cond-expr",locations:[{start:{line:116,column:14},end:{line:116,column:24}},{start:{line:117,column:14},end:{line:121,column:31}}],line:115},"3":{loc:{start:{line:117,column:14},end:{line:121,column:31}},type:"cond-expr",locations:[{start:{line:118,column:18},end:{line:118,column:28}},{start:{line:119,column:18},end:{line:121,column:31}}],line:117},"4":{loc:{start:{line:119,column:18},end:{line:121,column:31}},type:"cond-expr",locations:[{start:{line:120,column:22},end:{line:120,column:36}},{start:{line:121,column:22},end:{line:121,column:31}}],line:119}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"fa336572cab3f1b0845741410b61af14ac510f04"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_l9z2l0cmb=function(){return actualCoverage;};}return actualCoverage;}cov_l9z2l0cmb();// Facts Router
// variables
const{Router,json}=(cov_l9z2l0cmb().s[0]++,require("express"));const FactsRouter=(cov_l9z2l0cmb().s[1]++,Router());const jsonBodyParser=(cov_l9z2l0cmb().s[2]++,json());const path=(cov_l9z2l0cmb().s[3]++,require("path"));// services
const{checkForMissingValue}=(cov_l9z2l0cmb().s[4]++,require("../middleware/check-for-missing-value"));const{checkFactExists}=(cov_l9z2l0cmb().s[5]++,require('../middleware/check-if-exists'));const FactsService=(cov_l9z2l0cmb().s[6]++,require("./facts-service"));const uuid4=(cov_l9z2l0cmb().s[7]++,require("uuid4"));// router
cov_l9z2l0cmb().s[8]++;FactsRouter.route('/').get((req,res,next)=>{cov_l9z2l0cmb().f[0]++;cov_l9z2l0cmb().s[9]++;FactsService.getAllFacts().then(fact=>{cov_l9z2l0cmb().f[1]++;cov_l9z2l0cmb().s[10]++;res.json(fact.map(FactsService.serializeFact));}).catch(next);}).post(jsonBodyParser,(req,res,next)=>{cov_l9z2l0cmb().f[2]++;// set variables from request body
const{title,user_id}=(cov_l9z2l0cmb().s[11]++,req.body);const date_submitted=(cov_l9z2l0cmb().s[12]++,new Date());const status=(cov_l9z2l0cmb().s[13]++,'Pending');// newly submitted facts default to status 'Pending'
const serial=(cov_l9z2l0cmb().s[14]++,uuid4());const newFact=(cov_l9z2l0cmb().s[15]++,{title,user_id,status,date_submitted,serial});// async function to check if a value is missing
cov_l9z2l0cmb().s[16]++;checkForMissingValue(newFact,res);cov_l9z2l0cmb().s[17]++;FactsService.insertFact(newFact).then(fact=>{cov_l9z2l0cmb().f[3]++;cov_l9z2l0cmb().s[18]++;res.status(201).location(path.posix.join(req.originalUrl,`/id/${fact.fact_id}`))// alt .location(`/api/facts/id/${fact.fact_id}`)
.json(FactsService.serializeFact(fact));}).catch(next);});cov_l9z2l0cmb().s[19]++;FactsRouter.route('/id/:fact_id').all(checkFactExists).get((req,res,next)=>{cov_l9z2l0cmb().f[4]++;cov_l9z2l0cmb().s[20]++;return FactsService.serializeFact(res.json(res.fact));}).delete((req,res,next)=>{cov_l9z2l0cmb().f[5]++;const{fact_id}=(cov_l9z2l0cmb().s[21]++,req.params);cov_l9z2l0cmb().s[22]++;FactsService.deleteFact(fact_id).then(()=>{cov_l9z2l0cmb().f[6]++;cov_l9z2l0cmb().s[23]++;return res.status(204).end();}).catch(next);}).patch(jsonBodyParser,(req,res,next)=>{cov_l9z2l0cmb().f[7]++;const{title,user_id,date_submitted,date_under_review,date_approved,date_not_true}=(cov_l9z2l0cmb().s[24]++,req.body);const fact=(cov_l9z2l0cmb().s[25]++,{title,user_id,date_submitted,date_under_review,date_approved,date_not_true});const fact_id=(cov_l9z2l0cmb().s[26]++,req.params.fact_id);// remove any field that doesn't have a value (null)
cov_l9z2l0cmb().s[27]++;for(const[key,value]of Object.entries(fact)){cov_l9z2l0cmb().s[28]++;if(value==null){cov_l9z2l0cmb().b[0][0]++;cov_l9z2l0cmb().s[29]++;delete fact[key];}else{cov_l9z2l0cmb().b[0][1]++;}}// set how many values there are left
const numOfValues=(cov_l9z2l0cmb().s[30]++,Object.values(fact).filter(Boolean).length);// if all values are null, or title is not included, return error
cov_l9z2l0cmb().s[31]++;if(numOfValues===0){cov_l9z2l0cmb().b[1][0]++;cov_l9z2l0cmb().s[32]++;return res.status(400).json({error:{message:`Must require at least one change`}});}else{cov_l9z2l0cmb().b[1][1]++;}// set new status if a date has been submitted
const statusChange=(cov_l9z2l0cmb().s[33]++,date_not_true?(cov_l9z2l0cmb().b[2][0]++,'Not true'):(cov_l9z2l0cmb().b[2][1]++,date_approved?(cov_l9z2l0cmb().b[3][0]++,'Approved'):(cov_l9z2l0cmb().b[3][1]++,date_under_review?(cov_l9z2l0cmb().b[4][0]++,'Under Review'):(cov_l9z2l0cmb().b[4][1]++,'Pending'))));const patchedFact=(cov_l9z2l0cmb().s[34]++,{...fact,status:statusChange});cov_l9z2l0cmb().s[35]++;FactsService.updateFact(fact_id,patchedFact).then(()=>{cov_l9z2l0cmb().f[8]++;cov_l9z2l0cmb().s[36]++;FactsService.getFactById(fact_id).then(fact=>{cov_l9z2l0cmb().f[9]++;cov_l9z2l0cmb().s[37]++;return res.status(201).json(fact);}).catch(err=>{cov_l9z2l0cmb().f[10]++;cov_l9z2l0cmb().s[38]++;console.log('Get Fact failed',err);});}).catch(err=>{cov_l9z2l0cmb().f[11]++;cov_l9z2l0cmb().s[39]++;console.log('Update Fact failed:',err);});});cov_l9z2l0cmb().s[40]++;module.exports=FactsRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
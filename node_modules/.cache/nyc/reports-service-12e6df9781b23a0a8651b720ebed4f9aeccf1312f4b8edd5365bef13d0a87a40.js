function cov_m4khlsxz9(){var path="/Users/nickfarni/WebstormProjects/truth-checker-api/src/reports/reports-service.js";var hash="2103b8944cf2e40de31ce6a7269c64849824ed07";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/nickfarni/WebstormProjects/truth-checker-api/src/reports/reports-service.js",statementMap:{"0":{start:{line:2,column:15},end:{line:2,column:45}},"1":{start:{line:4,column:23},end:{line:75,column:1}},"2":{start:{line:8,column:8},end:{line:33,column:52}},"3":{start:{line:37,column:8},end:{line:41,column:20}},"4":{start:{line:45,column:8},end:{line:50,column:77}},"5":{start:{line:49,column:32},end:{line:49,column:38}},"6":{start:{line:50,column:28},end:{line:50,column:76}},"7":{start:{line:54,column:8},end:{line:57,column:27}},"8":{start:{line:62,column:21},end:{line:71,column:13}},"9":{start:{line:63,column:24},end:{line:63,column:40}},"10":{start:{line:64,column:10},end:{line:69,column:11}},"11":{start:{line:65,column:12},end:{line:65,column:43}},"12":{start:{line:66,column:12},end:{line:66,column:55}},"13":{start:{line:68,column:12},end:{line:68,column:56}},"14":{start:{line:70,column:10},end:{line:70,column:21}},"15":{start:{line:72,column:8},end:{line:72,column:59}},"16":{start:{line:72,column:46},end:{line:72,column:57}},"17":{start:{line:77,column:0},end:{line:77,column:32}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:7,column:16},end:{line:7,column:17}},loc:{start:{line:7,column:22},end:{line:34,column:5}},line:7},"1":{name:"(anonymous_1)",decl:{start:{line:36,column:19},end:{line:36,column:20}},loc:{start:{line:36,column:34},end:{line:42,column:5}},line:36},"2":{name:"(anonymous_2)",decl:{start:{line:44,column:18},end:{line:44,column:19}},loc:{start:{line:44,column:30},end:{line:51,column:5}},line:44},"3":{name:"(anonymous_3)",decl:{start:{line:49,column:18},end:{line:49,column:19}},loc:{start:{line:49,column:32},end:{line:49,column:38}},line:49},"4":{name:"(anonymous_4)",decl:{start:{line:50,column:18},end:{line:50,column:19}},loc:{start:{line:50,column:28},end:{line:50,column:76}},line:50},"5":{name:"(anonymous_5)",decl:{start:{line:53,column:18},end:{line:53,column:19}},loc:{start:{line:53,column:41},end:{line:58,column:5}},line:53},"6":{name:"(anonymous_6)",decl:{start:{line:61,column:23},end:{line:61,column:24}},loc:{start:{line:61,column:32},end:{line:73,column:7}},line:61},"7":{name:"(anonymous_7)",decl:{start:{line:62,column:32},end:{line:62,column:33}},loc:{start:{line:62,column:46},end:{line:71,column:9}},line:62},"8":{name:"(anonymous_8)",decl:{start:{line:72,column:39},end:{line:72,column:40}},loc:{start:{line:72,column:46},end:{line:72,column:57}},line:72}},branchMap:{"0":{loc:{start:{line:64,column:10},end:{line:69,column:11}},type:"if",locations:[{start:{line:64,column:10},end:{line:69,column:11}},{start:{line:64,column:10},end:{line:69,column:11}}],line:64}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2103b8944cf2e40de31ce6a7269c64849824ed07"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_m4khlsxz9=function(){return actualCoverage;};}return actualCoverage;}cov_m4khlsxz9();// Reports Service
const{db}=(cov_m4khlsxz9().s[0]++,require('../database/connect'));const ReportsService=(cov_m4khlsxz9().s[1]++,{// get all reported facts
getReports:()=>{cov_m4khlsxz9().f[0]++;cov_m4khlsxz9().s[2]++;return db.from('reports AS rpt').select('rpt.report_id','rpt.date_created','rpt.report_status',db.raw(`json_strip_nulls(
                        json_build_object(
                            'fact_id', fct.fact_id,
                            'title', fct.title,
                            'user_id', fct.user_id,
                            'fact_status', fct.status,
                            'date_submitted', fct.date_submitted,
                            'date_approved', fct.date_approved,
                            'date_not_true', fct.date_not_true
                        )
                    ) AS "reportedFact"`)).leftJoin('facts AS fct','rpt.fact_id','fct.fact_id').groupBy('rpt.report_id','fct.fact_id');},getReportById:report_id=>{cov_m4khlsxz9().f[1]++;cov_m4khlsxz9().s[3]++;return db.from('reports').select('*').where('report_id',report_id).first();},insertReport:report=>{cov_m4khlsxz9().f[2]++;cov_m4khlsxz9().s[4]++;return db.insert(report).into('reports').returning('*').then(([report])=>{cov_m4khlsxz9().f[3]++;cov_m4khlsxz9().s[5]++;return report;}).then(report=>{cov_m4khlsxz9().f[4]++;cov_m4khlsxz9().s[6]++;return ReportsService.getReportById(report.report_id);});},updateReport:(report_id,fields)=>{cov_m4khlsxz9().f[5]++;cov_m4khlsxz9().s[7]++;return db.from('reports').where('report_id',report_id).update(fields);},// if the same fact is reported > 1, then return the fact with the number of times it's been reported
removeDupesReduce:arr=>{cov_m4khlsxz9().f[6]++;let report=(cov_m4khlsxz9().s[8]++,arr.reduce((acc,cur)=>{cov_m4khlsxz9().f[7]++;let curFact=(cov_m4khlsxz9().s[9]++,cur.reportedFact);cov_m4khlsxz9().s[10]++;if(!acc.hasOwnProperty(curFact.fact_id)){cov_m4khlsxz9().b[0][0]++;cov_m4khlsxz9().s[11]++;acc[curFact.fact_id]=curFact;cov_m4khlsxz9().s[12]++;acc[curFact.fact_id].number_of_reports=1;}else{cov_m4khlsxz9().b[0][1]++;cov_m4khlsxz9().s[13]++;acc[curFact.fact_id].number_of_reports+=1;}cov_m4khlsxz9().s[14]++;return acc;},{}));cov_m4khlsxz9().s[15]++;return Object.keys(report).map(key=>{cov_m4khlsxz9().f[8]++;cov_m4khlsxz9().s[16]++;return report[key];});}});cov_m4khlsxz9().s[17]++;module.exports=ReportsService;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcG9ydHMtc2VydmljZS5qcyJdLCJuYW1lcyI6WyJkYiIsInJlcXVpcmUiLCJSZXBvcnRzU2VydmljZSIsImdldFJlcG9ydHMiLCJmcm9tIiwic2VsZWN0IiwicmF3IiwibGVmdEpvaW4iLCJncm91cEJ5IiwiZ2V0UmVwb3J0QnlJZCIsInJlcG9ydF9pZCIsIndoZXJlIiwiZmlyc3QiLCJpbnNlcnRSZXBvcnQiLCJyZXBvcnQiLCJpbnNlcnQiLCJpbnRvIiwicmV0dXJuaW5nIiwidGhlbiIsInVwZGF0ZVJlcG9ydCIsImZpZWxkcyIsInVwZGF0ZSIsInJlbW92ZUR1cGVzUmVkdWNlIiwiYXJyIiwicmVkdWNlIiwiYWNjIiwiY3VyIiwiY3VyRmFjdCIsInJlcG9ydGVkRmFjdCIsImhhc093blByb3BlcnR5IiwiZmFjdF9pZCIsIm51bWJlcl9vZl9yZXBvcnRzIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI0eEdBZVk7eUZBZlo7QUFDQSxLQUFNLENBQUVBLEVBQUYsMEJBQVNDLE9BQU8sQ0FBQyxxQkFBRCxDQUFoQixDQUFOLENBRUEsS0FBTUMsQ0FBQUEsY0FBYyx5QkFBRyxDQUVuQjtBQUNBQyxVQUFVLENBQUUsSUFBTSwrQ0FDZCxNQUFPSCxDQUFBQSxFQUFFLENBQ0pJLElBREUsQ0FDRyxnQkFESCxFQUVGQyxNQUZFLENBR0MsZUFIRCxDQUlDLGtCQUpELENBS0MsbUJBTEQsQ0FNQ0wsRUFBRSxDQUFDTSxHQUFILENBQ0s7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBWGdCLENBTkQsRUFvQkZDLFFBcEJFLENBcUJDLGNBckJELENBc0JDLGFBdEJELENBdUJDLGFBdkJELEVBeUJGQyxPQXpCRSxDQXlCTSxlQXpCTixDQXlCdUIsYUF6QnZCLENBQVAsQ0EwQkgsQ0E5QmtCLENBZ0NuQkMsYUFBYSxDQUFHQyxTQUFELEVBQWUsK0NBQzFCLE1BQU9WLENBQUFBLEVBQUUsQ0FDSkksSUFERSxDQUNHLFNBREgsRUFFRkMsTUFGRSxDQUVLLEdBRkwsRUFHRk0sS0FIRSxDQUdJLFdBSEosQ0FHaUJELFNBSGpCLEVBSUZFLEtBSkUsRUFBUCxDQUtILENBdENrQixDQXdDbkJDLFlBQVksQ0FBR0MsTUFBRCxFQUFZLCtDQUN0QixNQUFPZCxDQUFBQSxFQUFFLENBQ0plLE1BREUsQ0FDS0QsTUFETCxFQUVGRSxJQUZFLENBRUcsU0FGSCxFQUdGQyxTQUhFLENBR1EsR0FIUixFQUlGQyxJQUpFLENBSUcsQ0FBQyxDQUFDSixNQUFELENBQUQsR0FBY0EscURBQUFBLENBQUFBLE1BQU0sRUFKdkIsRUFLRkksSUFMRSxDQUtHSixNQUFNLEVBQUkscURBQUFaLENBQUFBLGNBQWMsQ0FBQ08sYUFBZixDQUE4QkssTUFBTSxDQUFDSixTQUFyQyxFQUFnRCxDQUw3RCxDQUFQLENBTUgsQ0EvQ2tCLENBaURuQlMsWUFBWSxDQUFFLENBQUNULFNBQUQsQ0FBWVUsTUFBWixHQUF1QiwrQ0FDakMsTUFBT3BCLENBQUFBLEVBQUUsQ0FDSkksSUFERSxDQUNHLFNBREgsRUFFRk8sS0FGRSxDQUVJLFdBRkosQ0FFaUJELFNBRmpCLEVBR0ZXLE1BSEUsQ0FHS0QsTUFITCxDQUFQLENBSUgsQ0F0RGtCLENBd0RuQjtBQUNBRSxpQkFBaUIsQ0FBR0MsR0FBRCxFQUFTLHdCQUN4QixHQUFJVCxDQUFBQSxNQUFNLHlCQUFHUyxHQUFHLENBQUNDLE1BQUosQ0FBVyxDQUFDQyxHQUFELENBQU1DLEdBQU4sR0FBYyx3QkFDcEMsR0FBSUMsQ0FBQUEsT0FBTyx5QkFBR0QsR0FBRyxDQUFDRSxZQUFQLENBQVgsQ0FEb0Msd0JBRXBDLEdBQUksQ0FBQ0gsR0FBRyxDQUFDSSxjQUFKLENBQW1CRixPQUFPLENBQUNHLE9BQTNCLENBQUwsQ0FBMEMsbURBQ3hDTCxHQUFHLENBQUNFLE9BQU8sQ0FBQ0csT0FBVCxDQUFILENBQXVCSCxPQUF2QixDQUR3Qyx3QkFFeENGLEdBQUcsQ0FBQ0UsT0FBTyxDQUFDRyxPQUFULENBQUgsQ0FBcUJDLGlCQUFyQixDQUF5QyxDQUF6QyxDQUNELENBSEQsSUFHTyxtREFDTE4sR0FBRyxDQUFDRSxPQUFPLENBQUNHLE9BQVQsQ0FBSCxDQUFxQkMsaUJBQXJCLEVBQTBDLENBQTFDLENBQ0QsQ0FQbUMsd0JBUXBDLE1BQU9OLENBQUFBLEdBQVAsQ0FDRCxDQVRZLENBU1gsRUFUVyxDQUFILENBQVYsQ0FEd0Isd0JBV3hCLE1BQU9PLENBQUFBLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZbkIsTUFBWixFQUFvQm9CLEdBQXBCLENBQXdCQyxHQUFHLEVBQUksc0RBQUFyQixDQUFBQSxNQUFNLENBQUNxQixHQUFELENBQU4sQ0FBVyxDQUExQyxDQUFQLENBQ0QsQ0FyRWdCLENBQUgsQ0FBcEIsQyx3QkF5RUFDLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQm5DLGNBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gUmVwb3J0cyBTZXJ2aWNlXG5jb25zdCB7IGRiIH0gPSByZXF1aXJlKCcuLi9kYXRhYmFzZS9jb25uZWN0Jyk7XG5cbmNvbnN0IFJlcG9ydHNTZXJ2aWNlID0ge1xuXG4gICAgLy8gZ2V0IGFsbCByZXBvcnRlZCBmYWN0c1xuICAgIGdldFJlcG9ydHM6ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGRiXG4gICAgICAgICAgICAuZnJvbSgncmVwb3J0cyBBUyBycHQnKVxuICAgICAgICAgICAgLnNlbGVjdChcbiAgICAgICAgICAgICAgICAncnB0LnJlcG9ydF9pZCcsXG4gICAgICAgICAgICAgICAgJ3JwdC5kYXRlX2NyZWF0ZWQnLFxuICAgICAgICAgICAgICAgICdycHQucmVwb3J0X3N0YXR1cycsXG4gICAgICAgICAgICAgICAgZGIucmF3KFxuICAgICAgICAgICAgICAgICAgICBganNvbl9zdHJpcF9udWxscyhcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb25fYnVpbGRfb2JqZWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmYWN0X2lkJywgZmN0LmZhY3RfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJywgZmN0LnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VyX2lkJywgZmN0LnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZhY3Rfc3RhdHVzJywgZmN0LnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0ZV9zdWJtaXR0ZWQnLCBmY3QuZGF0ZV9zdWJtaXR0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGVfYXBwcm92ZWQnLCBmY3QuZGF0ZV9hcHByb3ZlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0ZV9ub3RfdHJ1ZScsIGZjdC5kYXRlX25vdF90cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICkgQVMgXCJyZXBvcnRlZEZhY3RcImBcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmxlZnRKb2luKFxuICAgICAgICAgICAgICAgICdmYWN0cyBBUyBmY3QnLFxuICAgICAgICAgICAgICAgICdycHQuZmFjdF9pZCcsXG4gICAgICAgICAgICAgICAgJ2ZjdC5mYWN0X2lkJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmdyb3VwQnkoJ3JwdC5yZXBvcnRfaWQnLCAnZmN0LmZhY3RfaWQnKVxuICAgIH0sXG5cbiAgICBnZXRSZXBvcnRCeUlkOiAocmVwb3J0X2lkKSA9PiB7XG4gICAgICAgIHJldHVybiBkYlxuICAgICAgICAgICAgLmZyb20oJ3JlcG9ydHMnKVxuICAgICAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgICAgICAud2hlcmUoJ3JlcG9ydF9pZCcsIHJlcG9ydF9pZClcbiAgICAgICAgICAgIC5maXJzdCgpXG4gICAgfSxcblxuICAgIGluc2VydFJlcG9ydDogKHJlcG9ydCkgPT4ge1xuICAgICAgICByZXR1cm4gZGJcbiAgICAgICAgICAgIC5pbnNlcnQocmVwb3J0KVxuICAgICAgICAgICAgLmludG8oJ3JlcG9ydHMnKVxuICAgICAgICAgICAgLnJldHVybmluZygnKicpXG4gICAgICAgICAgICAudGhlbigoW3JlcG9ydF0pID0+IHJlcG9ydClcbiAgICAgICAgICAgIC50aGVuKHJlcG9ydCA9PiBSZXBvcnRzU2VydmljZS5nZXRSZXBvcnRCeUlkKCByZXBvcnQucmVwb3J0X2lkICkpXG4gICAgfSxcblxuICAgIHVwZGF0ZVJlcG9ydDogKHJlcG9ydF9pZCwgZmllbGRzKSA9PiB7XG4gICAgICAgIHJldHVybiBkYlxuICAgICAgICAgICAgLmZyb20oJ3JlcG9ydHMnKVxuICAgICAgICAgICAgLndoZXJlKCdyZXBvcnRfaWQnLCByZXBvcnRfaWQpXG4gICAgICAgICAgICAudXBkYXRlKGZpZWxkcylcbiAgICB9LFxuXG4gICAgLy8gaWYgdGhlIHNhbWUgZmFjdCBpcyByZXBvcnRlZCA+IDEsIHRoZW4gcmV0dXJuIHRoZSBmYWN0IHdpdGggdGhlIG51bWJlciBvZiB0aW1lcyBpdCdzIGJlZW4gcmVwb3J0ZWRcbiAgICByZW1vdmVEdXBlc1JlZHVjZTogKGFycikgPT4ge1xuICAgICAgICBsZXQgcmVwb3J0ID0gYXJyLnJlZHVjZSgoYWNjLCBjdXIpID0+IHtcbiAgICAgICAgICBsZXQgY3VyRmFjdCA9IGN1ci5yZXBvcnRlZEZhY3Q7XG4gICAgICAgICAgaWYgKCFhY2MuaGFzT3duUHJvcGVydHkoY3VyRmFjdC5mYWN0X2lkKSkge1xuICAgICAgICAgICAgYWNjW2N1ckZhY3QuZmFjdF9pZF0gPSBjdXJGYWN0O1xuICAgICAgICAgICAgYWNjW2N1ckZhY3QuZmFjdF9pZF0ubnVtYmVyX29mX3JlcG9ydHMgPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2NbY3VyRmFjdC5mYWN0X2lkXS5udW1iZXJfb2ZfcmVwb3J0cyArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LHt9KTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHJlcG9ydCkubWFwKGtleSA9PiByZXBvcnRba2V5XSk7XG4gICAgICB9XG4gICAgXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlcG9ydHNTZXJ2aWNlOyJdfQ==